#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <ctime>
#include <cctype>
#include <cmath>
#include <memory>
#include <sstream>
#include <fstream>
#include <cstring>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <list>
#include <utility>
#include <functional>
#include <map>
#include <chrono>
#include <random>
#include <thread>
#include <stack>
#include <queue>
using namespace std;

stack<pair<float,float>>theConvexHull;

float distance(pair<float,float> pt1,pair<float,float> pt2);
pair<float,float> findBottom(vector<pair<float,float>> points);
int rotDir(pair<float,float>pt1,pair<float,float>pt2,pair<float,float>pt3);
float findAngle(pair<float,float>pt1,pair<float,float>pt2);
float findSlope(pair<float,float>pt1,pair<float,float>pt2);
void populateHull(vector<pair<float,float>> pts);
void stackContents();
void stackContents()
{
    while(theConvexHull.empty()!=false)
    {   
        cout<<theConvexHull.top().first<<" "<<theConvexHull.top().second<<endl;
        theConvexHull.pop();
    }
}
void populateHull(vector<pair<float,float>> pts)
{
    //move up the vector linearly
    //compare each point for the best bestAngle
    //each best angle point goes on the stack
    //same point is removed from the vector (assigned 0,0)
    float bestAngle=360;
    pair<float,float> refPt = theConvexHull.top();
    
    for(auto& it:pts)
    {
        if(bestAngle>findAngle(theConvexHull.top(),it))
        {
            bestAngle = findAngle(theConvexHull.top(),it);
            refPt = it;
        }
    }
}
float findSlope(pair<float,float>pt1,pair<float,float>pt2)
{
    float x1=pt1.first;
    float x2=pt2.first;
    float y1=pt1.second;
    float y2=pt2.second;
    if(y2-y1==0&&x2-x1==0)
        return 0;
    if(y2-y1==0)
        return 90;
    if(x2-x1==0)
        return 0;
        
    return(x2-x1)/(y2-y1);
}
float findAngle(pair<float,float>pt1,pair<float,float>pt2)
{
    float slope = findSlope(pt1,pt2);
    return (atan(slope)*180)/3.14159;
}
int rotDir(pair<float,float>pt1,pair<float,float>pt2,pair<float,float>pt3)
{
    float area = (pt2.first-pt1.first)*(pt3.second-pt1.second)-(pt2.second-pt1.second)*(pt3.first-pt1.first);
    
    if(area<0)
        return -1;
    if(area>0)
        return 1;
    return 0;
    //Source code for this function.
    //YouTube. (2020, April 19). Convex hull algorithm - Graham scan and Jarvis March tutorial.
    //YouTube. Retrieved February 19, 2022, from https://www.youtube.com/watch?v=B2AJoQSZf4M
}
pair<float,float> findBottom(vector<pair<float,float>> points)
{
    pair<float,float> bottom;
    bottom = make_pair(9999,9999);
    for(auto& it:points)
    {
        if(it.second<bottom.second)
            bottom = make_pair(it.first,it.second);
    }
    return bottom;
}
float distance(pair<float,float> pt1,pair<float,float> pt2)
{
    float d = sqrt(pow(pt2.first - pt1.first,2) + pow(pt2.second - pt1.second,2) );
    return d;
}

int main()
{
    vector<pair<float,float>>points;
    pair<float,float>bottomPoint;
    points.push_back(make_pair(0,0));
    points.push_back(make_pair(5,6));
    points.push_back(make_pair(5,5));
    findBottom(points);
    theConvexHull.push(bottomPoint);
    stackContents();
    return 0;
}
